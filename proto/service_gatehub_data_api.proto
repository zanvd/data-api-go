// The MIT License (MIT)

// Copyright (c) 2023 GateHub Limited

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package proto;

import "rpc_get_ledger.proto";
import "rpc_get_transaction.proto";
import "rpc_get_balance_changes.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package="github.com/GateHubNet/data-api-go/internal/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "GateHub Data API";
        version: "1.0";
        description: "The GateHub Data API provides access to information about changes in the XRP Ledger, including transaction history and processed analytical data.";
        contact: {
            name: "GateHub Limited";
            url: "https://gatehub.net";
            email: "info@gatehub.net";
        };
    };
    base_path: "localhost:8080"
    schemes: HTTPS;
    schemes: WSS;
    consumes: "application/json";
    produces: "application/json";
};

service GateHubDataAPI {
    rpc GetLastValidatedLedger(GetLastValidatedLedgerRequest) returns (GetLedgerResponse) {
        option (google.api.http) = {
            get: "/v2/ledgers",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get last validated ledger.";
            operation_id: "getLastValidatedLedger";
            tags: "GateHubDataAPI"
            tags: "ledger";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
    }

    rpc GetLedger(GetLedgerRequest) returns (GetLedgerResponse) {
        option (google.api.http) = {
            get: "/v2/ledgers/{identifier}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get ledger by identifier.";
            operation_id: "getLedger";
            tags: "ledger";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
    }

    rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
        option (google.api.http) = {
            get: "/v2/transactions/{hash}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get transaction by hash.";
            operation_id: "getTransactionByHash";
            tags: "transaction";
            responses: {
                key: "200"
                value: {
                    description: "OK"
                }
            }
        };
    }

    rpc GetAccountBalanceChanges(GetAccountBalanceChangesRequest) returns (GetAccountBalanceChangesResponse) {
        option (google.api.http) = {
            get: "/v2/accounts/{address}/balance_changes"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Retrieve Balance changes for a given account over time.";
            operation_id: "getAccountBalanceChanges";
            tags: "accounts";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
    }
}