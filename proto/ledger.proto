// The MIT License (MIT)

// Copyright (c) 2023 GateHub Limited

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package proto;

option go_package="github.com/GateHubNet/data-api-go/internal/pb";

//import "google/protobuf/any.proto";
import "transaction.proto";

message Ledger {
    /*
     * The Ledger Index of this ledger.
     */
    int64 ledger_index = 1 [json_name='ledger_index']; // @gotags: cql:"ledger_index" redis:"ledger_index"

    /*
     * Hash of all account state information in this ledger, as hex
     */
    string account_hash = 2 [json_name='account_hash']; // @gotags: cql:"account_hash" redis:"account_hash""

    /*
     * A bit-map of flags relating to the closing of this ledger.
     */
    uint32 close_flags = 3 [json_name='close_flags']; // @gotags: cql:"close_flags" redis:"close_flags"

    /*
     * The time this ledger was closed, in seconds since the Ripple Epoch
     */
    int64 close_time = 4 [json_name='close_time']; // @gotags: cql:"close_time" redis:"close_time"

    /*
     * Unique identifying hash of the entire ledger.
     */
    string ledger_hash = 5 [json_name='ledger_hash']; // @gotags: cql:"ledger_hash" redis:"ledger_hash"

    /*
     * Boolean value that represents if this ledger has already been processed or not
     */
    bool ledger_processed = 6 [json_name='ledger_processed']; // @gotags: cql:"ledger_processed" redis:"ledger_processed"

    /*
     * The time at which the previous ledger was closed.
     */
    int64 parent_close_time = 7 [json_name='parent_close_time']; // @gotags: cql:"parent_close_time" redis:"parent_close_time"

    /*
     * Unique identifying hash of the ledger that came immediately before this one.
     */
    string parent_hash = 8 [json_name='parent_hash']; // @gotags: cql:"parent_hash" redis:"parent_hash"

    /*
     * Total number of XRP drops in the network, as a quoted integer. (This decreases as transaction costs destroy XRP.)
     */
    string total_coins = 9 [json_name='total_coins']; // @gotags: cql:"total_coins" redis:"total_coins"

    /*
     * Hash of the transaction information included in this ledger, as hex
     */
    string transaction_hash = 10 [json_name='transaction_hash']; // @gotags: cql:"transaction_hash" redis:"transaction_hash"

    string close_day = 11 [json_name='close_day']; // @gotags: cql:"close_day" redis:"close_day"

    /*
     * Total number of transactions in this ledger.
     */
    uint32 tx_count = 12 [json_name='tx_count']; // @gotags: cql:"tx_count" redis:"tx_count"

    oneof transactions {
        HashList transaction_hashes = 13;
        TransactionList expanded_transactions = 14;
    }

    /*
     * Reserved for future use
     */
    reserved 15 to 99;
}

message HashList {
    repeated string hashes = 1;
}

message TransactionList {
    repeated Transaction transactions = 1;
}