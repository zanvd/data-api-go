// The MIT License (MIT)

// Copyright (c) 2023 GateHub Limited

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package proto;

option go_package="github.com/GateHubNet/data-api-go/internal/pb";

import "ledger.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message GetLastValidatedLedgerRequest {
    /*
     * (Optional) If true, include the identifying hashes of all transactions that are part of this ledger.
     */
     optional bool transactions = 1;

     /*
      * (Optional) If true, include all transactions from this ledger as hex-formatted binary data. (If provided, overrides transactions.)
      */
     optional bool binary = 2;
 
     /*
      * (Optional) If true, include all transactions from this ledger as nested JSON objects. (If provided, overrides binary and transactions.)
      */
     optional bool expand = 3;
}

message GetLedgerRequest {
    /* An identifier for the ledger to retrieve: 
     * either the full hash in hex, an integer sequence number, 
     * or a date-time. If a date-time is provided, retrieve the ledger 
     * that was most recently closed at that time. If omitted, 
     * retrieve the latest validated ledger.
    */
    string identifier = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        min_length: 1,
        field_configuration: {
          path_param_name: "identifier",
        },
    }];

    /*
     * (Optional) If true, include the identifying hashes of all transactions that are part of this ledger.
     */
    optional bool transactions = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    }];

    /*
     * (Optional) If true, include all transactions from this ledger as hex-formatted binary data. (If provided, overrides transactions.)
     */
    optional bool binary = 3;

    /*
     * (Optional) If true, include all transactions from this ledger as nested JSON objects. (If provided, overrides binary and transactions.)
     */
    optional bool expand = 4;
}

message GetLedgerResponse {
    /*
     * The value success indicates that this is a successful response.
     */
    string result = 1;

    /*
     * The requested ledger.
     */
    optional Ledger ledger = 2;

    /*
     * In case of error, message will return information about the error
     */
    optional string message = 3;
}